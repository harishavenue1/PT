LoadRunner Briefing Document
This document summarizes key themes, ideas, and facts from provided LoadRunner tutorial excerpts. It aims to provide a concise understanding of LoadRunner, its components, and its use in performance testing.

I. Introduction to LoadRunner
What is LoadRunner?

LoadRunner is a performance testing tool developed to measure the performance parameters of various applications under different load conditions.
"Loadrunner is a performance testing tool which was pioneered by mercury in 1999." - Tutorial #1
Currently owned by Micro Focus, it supports a vast array of development tools, technologies, and communication protocols.
Its results are often used as industry benchmarks for evaluating other performance testing tools.
Key Components:

VuGen (Virtual User Generator): Used for creating and editing scripts that simulate user actions on the application under test.
Controller: Orchestrates the load test, controlling the number of virtual users, load distribution, scenario execution, and data collection.
Analysis: Analyzes the performance test results, generating reports and graphs to visualize performance bottlenecks and areas for improvement.
Load Generator: A separate machine used to generate load and simulate virtual users accessing the application.
II. Performance Testing Types
LoadRunner facilitates various types of performance testing:

Load testing: Simulating a realistic user load to assess the application's behavior under normal conditions.
Stress testing: Pushing the application beyond its limits to determine its breaking point and identify bottlenecks.
Volume testing: Evaluating the application's performance with large data volumes to assess scalability.
Endurance testing: Testing the application's stability over prolonged periods of sustained load.
Spike testing: Simulating sudden bursts of user activity to see how the application handles rapid load fluctuations.
III. VuGen Deep Dive
Actions and Transactions:

VuGen scripts are organized into three main actions: vuser_init, Action, and vuser_end.
vuser_init: Contains initialization steps executed once at the start of the test, typically including application launch and login.
Action: Houses the core business process being tested and can be iterated multiple times to simulate repeated user actions.
vuser_end: Contains clean-up tasks performed once at the end of the test, typically including logging out and closing the application.
Transactions: Used to demarcate specific sets of actions within the script, allowing for targeted performance measurement and analysis.
"A transaction is technically defined as a set of actions performed in order to complete a task." - Tutorial #6
Data-Driven Testing:

VuGen supports parameterization, enabling data-driven testing by substituting hardcoded values with variables from external data sources.
This allows for running the same test with different data sets, simulating diverse user scenarios and improving test coverage.
"Parameter type is file which is external file if in case you want to make use of any internal resources you can make use of it." - Tutorial #10
Correlation:

Handles dynamic values generated by the server that can vary between test runs.
VuGen offers both manual and automatic correlation techniques to extract and reuse these values, ensuring script stability and accuracy.
"The second and the third iteration failed for the same reason and is the same form as well. Now let’s figure out that what exactly pl_2 could consist of." - Tutorial #11
Solution Explorer and Step Navigator:

Solution Explorer: Provides an overview of the script's structure, including actions, parameters, data files, runtime settings, and reports.
Step Navigator: Lists all functions and steps used in the script, enabling quick navigation to specific sections for efficient editing and debugging.
Runtime Settings:

Configure how the script will be executed, including the number of iterations, pacing between iterations, logging level, and think time.
"The time lag or gap between the execution of iterations of a script is called as pacing." - Tutorial #12
Offer flexibility in simulating real-world user behavior, such as introducing delays and think times to represent user pauses and interactions.
IV. Controller Operation
Scenarios:

LoadRunner supports two main scenario types:
Manual Scenario: Provides full control over load configuration, enabling you to define user arrival rates, durations, and execution patterns.
Goal-Oriented Scenario: Defines performance goals, such as desired hits per second or transaction response time, allowing LoadRunner to automatically adjust the load to meet the specified targets.
Load Generators:

"Controller is a component which basically applied loads on the system or the script which you prepare as a part of your fusion." - Tutorial #15
Used to distribute the load generated by virtual users across multiple machines, ensuring realistic test conditions and simulating a distributed user base.
Load generators need to be configured in the controller to connect and participate in the test execution.
Rendezvous Points:

Allow synchronization of virtual users, forcing them to wait at a specific point in the script before proceeding simultaneously.
Useful for simulating scenarios where concurrent user actions are required, like everyone clicking a submit button at the same time.
"In loadrunner, a rendezvous point is basically used to make certain activity possible for all the users simultaneously." - Tutorial #22
Service Level Agreements (SLAs):

Define performance expectations by setting thresholds for various metrics like transaction response times, throughput, and error rates.
The analysis compares actual results against these thresholds, indicating whether the SLAs were met and providing insights into the application's performance.
"During the load test the controller collects performance data… compares this data against the goals defined in the SLA and displays the result in SL report." - Tutorial #23
V. Analysis Features
Graphs and Reports:

Analysis provides a rich set of graphs and reports to visualize performance data collected during the test.
Users can customize and add graphs to monitor various performance metrics, including transaction response times, hits per second, throughput, and resource utilization.
Filters and Granularity:

Filters: Allow you to isolate specific data sets within the results, focusing analysis on particular users, timeframes, or other criteria.
Granularity: Controls the level of detail displayed in the graphs, allowing you to adjust the time interval represented by each data point for fine-grained or high-level analysis.
VI. Conclusion
LoadRunner offers a comprehensive suite of tools and features to effectively conduct performance testing.

Understanding the key components, various performance test types, and the features within VuGen, Controller, and Analysis empowers testers to create realistic load scenarios, identify performance bottlenecks, and ensure application stability and scalability under diverse conditions.
